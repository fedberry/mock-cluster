<?php
/**
 * @file
 * mock_cluster module.
 */
 
define('MOCK_AGENT_PENDING', 0);
define('MOCK_AGENT_ACTIVE', 1);
define('MOCK_AGENT_BLOCKED', 2);


define('MOCK_TASK_PENDING', 0);
define('MOCK_TASK_PROCESSING', 1);
define('MOCK_TASK_FAILED', 2);
define('MOCK_TASK_SUCCESS', 3);

/**
 * Implements hook_config_info().
 */
function mock_cluster_config_info() {
  $prefixes['mock_cluster.settings'] = array(
    'label' => t('Github Node settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_cron().
 */
function mock_cluster_cron() {
  $config = config('mock_cluster.settings');
  $arches = db_select('mock_arch', 'mar')
    ->fields('mar')
    ->execute()
    ->fetchAll();

  foreach($arches as $arch) {
    $timestamp = filectime($arch->rpm_dir);
    if(!$last_update = $config->get($arch->arch . '_lastupdate')){
      $last_update = 0;
    }
    
    if($timestamp > $last_update) {
      exec("cd " . $arch->rpm_dir . " && createrepo --update ./" );
    }

    $timestamp = filectime($arch->srpm_dir);
    if($timestamp > $last_update) {
      exec("cd " . $arch->srpm_dir . " && createrepo --update ./" );
    }
    $config->set($arch->arch . '_lastupdate', $timestamp);
  }
  $config->save();
}


/**
 * Implements hook_permission().
 */
function mock_cluster_permission() {
  return array(
    'administer mock cluster' => array(
      'title' => t('Administer mock cluster'),
      'description' => t('Control mock_cluster settings'),
      'restrict access' => TRUE,
    ),
    'administer mock agents' => array(
      'title' => t('Administer mock agents'),
      'description' => t('Control agents'),
      'restrict access' => TRUE,
    ),
    'administer mock tasks' => array(
      'title' => t('Administer mock tasks'),
      'description' => t('Control tasks'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements menu access function().
 */
function mock_agent_access($agent, $type) {
  global $user;
  if(user_access('administer mock agents')) {
    switch($type) {
      case 'delete':
          return TRUE;
        break;
      case 'activate':
          if($agent->status == MOCK_AGENT_PENDING or $agent->status == MOCK_AGENT_BLOCKED ){
            return TRUE;
          }
        break;        
      case 'block':
          if($agent->status != MOCK_AGENT_BLOCKED ){
            return TRUE;
          }
        break;        
    }
  }
  return FALSE;
}

/**
 * Implements hook_load().
 */
function mock_agent_load($identificationID){
  return db_select('mock_agents', 'ma')
    ->fields('ma')
    ->condition('identificationID', $identificationID)
    ->execute()
    ->fetchObject();
}

/**
 * Implements hook_load().
 */
function mock_task_load($tid){
  return db_select('mock_tasks', 'mt')
    ->fields('mt')
    ->condition('tid', $tid)
    ->execute()
    ->fetchObject();
}


/**
 * Implements hook_load().
 */
function mock_arch_load($arch){
  return db_select('mock_arch', 'mar')
    ->fields('mar')
    ->condition('arch', $arch)
    ->execute()
    ->fetchObject();
}
/**
 * Implements hook_load_by_id().
 */
function mock_agent_load_by_id($aid){
  return db_select('mock_agents', 'ma')
    ->fields('ma')
    ->condition('aid', $aid)
    ->execute()
    ->fetchObject();
}

/**
 * Menu item title callback - show task title.
 */
function mock_task_title($task) {
  return is_object($task) ? t("Task #!tid", array('!tid' => $task->tid)) : '';
}
/**
 * Menu item title callback - show agent title.
 */
function mock_agent_title($agent) {
  return is_object($agent) ? $agent->identificationID : '';
}

/**
 * Implements hook_menu().
 */
function mock_cluster_menu() {
  $items = array();
  
  $items['api/auth'] = array(
    'title' => 'API/auth', 
    'page callback' => 'mock_cluster_rest_auth',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mock_cluster.rest.inc',   
    'delivery callback' => 'mock_cluster_ajax_deliver',     
  );

  $items['api/task'] = array(
    'title' => 'API/task',   
    'page callback' => 'mock_cluster_rest_task',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mock_cluster.rest.inc',   
    'delivery callback' => 'mock_cluster_ajax_deliver',     
  );

  $items['api/task/%mock_task'] = array(
    'title' => 'API/task',   
    'page callback' => 'mock_cluster_rest_task_by_id',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mock_cluster.rest.inc',   
    'delivery callback' => 'mock_cluster_ajax_deliver',     
  );


  $items['admin/config/mock_cluster'] = array(
    'title' => 'Mock cluster configuration',
    'description' => 'Configure mock cluster.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_cluster_configure'),
    'access arguments' => array('administer mock cluster'),
    'file' => 'mock_cluster.admin.inc',
  );
  
  $items['admin/config/mock_cluster/view'] = array(
    'title' => 'Mock cluster configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );  
  
  $items['admin/config/mock_cluster/arch'] = array(
    'title' => 'arch',
    'description' => 'Configure mock cluster.',
    'page callback' => 'mock_cluster_arch',
    'access arguments' => array('administer mock cluster'),
    'file' => 'mock_cluster.admin.inc',
    'type' => MENU_LOCAL_TASK,    
  );
  $items['admin/config/mock_cluster/arch_add'] = array(
    'title' => 'Add Arch',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_arch_add'),
    'access arguments' => array('administer mock cluster'),
    'file' => 'mock_cluster.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/config/mock_cluster/arch/%mock_arch/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_arch_delete', 4),
    'access arguments' => array('administer mock cluster'),
    'file' => 'mock_cluster.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/mock_cluster/arch/%mock_arch/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_arch_edit', 4),
    'access arguments' => array('administer mock cluster'),
    'file' => 'mock_cluster.admin.inc',
    'type' => MENU_CALLBACK,
  );

  
  $items['tasks'] = array(
    'title' => 'Tasks',
    'page callback' => 'mock_cluster_tasks',
    'access arguments' => array('access content'),
    'file' => 'mock_cluster.tasks.inc',
    'weight' => -10, 
    'menu_name' => 'menu-github-pages',
  );

  $items['tasks/list'] = array(
    'title' => 'Tasks',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['tasks/add'] = array(
    'title' => 'Add task',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_task_add'),
    'access arguments' => array('administer mock tasks'),
    'file' => 'mock_cluster.tasks.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  
  $items['tasks/%mock_task'] = array(
    'type' => MENU_CALLBACK,    
    'title callback' => 'mock_task_title',
    'title arguments' => array(1),
    'page callback' => 'mock_cluster_task',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'mock_cluster.tasks.inc',
  );

  $items['tasks/%mock_task/view'] = array(
    'title callback' => 'mock_task_title',
    'title arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['tasks/%mock_task/edit'] = array(
    'type' => MENU_CALLBACK,    
    'title callback' => 'mock_task_title',
    'title arguments' => array(1),
    'page callback' => 'mock_cluster_task_edit',
    'page arguments' => array(1),
    'access arguments' => array('administer mock tasks'),
    'file' => 'mock_cluster.tasks.inc',
  );


  $items['tasks/%mock_task/download/%'] = array(
    'type' => MENU_CALLBACK,    
    'title callback' => 'mock_task_title',
    'title arguments' => array(1),
    'page callback' => 'mock_cluster_task_download',
    'page arguments' => array(1,3),
    'access arguments' => array('access content'),
    'file' => 'mock_cluster.tasks.inc',
  );
    
  $items['agents'] = array(
    'title' => 'Agents',
    'page callback' => 'mock_cluster_agents',
    'access arguments' => array('access content'),
    'file' => 'mock_cluster.agents.inc',
    'weight' => -10, 
    'menu_name' => 'menu-github-pages',
  );

  $items['agents/%mock_agent'] = array(
    'type' => MENU_CALLBACK,    
    'title callback' => 'mock_agent_title',
    'title arguments' => array(1),
    'page callback' => 'mock_cluster_agent',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'mock_cluster.agents.inc',
  );

  $items['agents/%mock_agent/view'] = array(
    'title callback' => 'mock_agent_title',
    'title arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['agents/%mock_agent/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_agent_delete', 1),
    'access callback' => 'mock_agent_access',
    'access arguments' => array(1, 'delete'),
    'file' => 'mock_cluster.agents.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['agents/%mock_agent/activate'] = array(
    'title' => 'Activate',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_agent_activate', 1),
    'access callback' => 'mock_agent_access',
    'access arguments' => array(1, 'activate'),
    'file' => 'mock_cluster.agents.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['agents/%mock_agent/block'] = array(
    'title' => 'Block',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mock_agent_block', 1),
    'access callback' => 'mock_agent_access',
    'access arguments' => array(1, 'block'),
    'file' => 'mock_cluster.agents.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function mock_cluster_ajax_deliver($page_callback_result) {
  backdrop_add_http_header('Content-Type', 'application/json; charset=utf-8');

  if (is_int($page_callback_result)) {
    $json = array('error' => TRUE);
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        $json['message'] = t('The requested page could not be found.');
        backdrop_add_http_header('Status', '404 Not Found');
        break;

      case MENU_ACCESS_DENIED:
        $json['message'] = t('You are not authorized to access this page.');
        backdrop_add_http_header('Status', '403 Forbidden');
        break;

      case MENU_SITE_OFFLINE:
        $json['message'] = t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => config_get('system.core', 'site_name')));
        backdrop_add_http_header('Status', '503 Service unavailable');
        break;
    }
  }
  elseif (is_array($page_callback_result)) {
    $json = $page_callback_result;
  }
  else {
    $json = array(
      'error' => TRUE,
      'message' => t('An unknown error has occurred.'),
    );
  }
  print backdrop_json_encode($json);
  if (backdrop_get_bootstrap_phase() == BACKDROP_BOOTSTRAP_FULL && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update')) {
    module_invoke_all('exit');
  }
}

/**
 * Get Human status by ID.
 */
function mock_task_status_by_id($task_status) {
  switch($task_status){
    case MOCK_TASK_PENDING:
      return t('Pending');
    case MOCK_TASK_PROCESSING:
      return t('Processing');
    case MOCK_TASK_FAILED:
      return t('Failed');
    case MOCK_TASK_SUCCESS:
      return t('Success');
  }
}
