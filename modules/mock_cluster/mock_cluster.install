<?php

/**
 * @file
 * Install, update and uninstall functions for the user module.
 */

/**
 * Implements hook_schema().
 */
function mock_cluster_schema() {
  $schema['mock_agents'] = array(
    'description' => 'Maps users to roles.',
    'fields' => array(
      'aid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique agent ID.',
      ),
      'identificationID' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique identificationID of agent.',
      ),
      'arch' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Supported ARCH.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the agent is pending(0), active(1) or blocked(2).',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when agent was created.',
      ),
      'access' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for previous time agent accessed the site.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'User uid who approved agent.',
        'default' => 0,
      ),
      'secret' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "Secret value to sign in requests.",
      ),
      'token' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "Temporary provided token.",
      ),
      'token_expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when token expire.',
      ),
    ),
    'primary key' => array('aid'),
    'indexes' => array(
      'identificationID' => array('identificationID'),
    ),
  );

  $schema['mock_tasks'] = array(
    'description' => 'Maps users to roles.',
    'fields' => array(
      'tid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique task ID.',
      ),
      'arch' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Supported ARCH.',
      ),
      'aid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Agent ID who took a task.',
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => "SRPM url.",
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the agent is pending(0), processing(1), failed(2) or success(3).',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp fwhen task was created.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when task has been changed.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'User uid who created task.',
        'default' => 0,
      ),
    ),
    'primary key' => array('tid'),
    'indexes' => array(
      'status' => array('status'),
      'arch' => array('arch'),
    ),
  );
  return $schema; 
}

/**
 * Create table mock_tasks."
 */
function mock_cluster_update_1001() {
  $schema = backdrop_get_schema_unprocessed('mock_cluster');
  db_create_table('mock_tasks', $schema['mock_tasks']);
}

/**
 * Add field url to table mock_tasks."
 */
function mock_cluster_update_1002() {
  $schema = backdrop_get_schema_unprocessed('mock_cluster');
  db_add_field('mock_tasks', 'url', $schema['mock_tasks']['fields']['url']);
}

/**
 * Add fields token, token_expire to table mock_agents."
 */
function mock_cluster_update_1003() {
  $schema = backdrop_get_schema_unprocessed('mock_cluster');
  db_add_field('mock_agents', 'token', $schema['mock_agents']['fields']['token']);
  db_add_field('mock_agents', 'token_expire', $schema['mock_agents']['fields']['token_expire']);
}

/**
 * Add fields token, token_expire to table mock_agents."
 */
function mock_cluster_update_1004() {
  $schema = backdrop_get_schema_unprocessed('mock_cluster');
  db_drop_field('mock_agents', 'MAC');
  db_add_field('mock_agents', 'identificationID', $schema['mock_agents']['fields']['identificationID']);
  db_add_index('comment', 'identificationID', array('identificationID');
}
